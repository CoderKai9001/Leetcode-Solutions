#include <bits/stdc++.h>
using namespace std;

// ⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣾⣿⣶⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣿⣟⣻⣽⣯⣘⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⠿⠿⠿⣿⣿⣻⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣴⠎
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠙⣿⣿⣽⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣴⣾⣿⣽⣾
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⣭⣷⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢸⣿⣷⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⠿⠛
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣷⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣶⣿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⡿⠟⠉⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠸⣿⣿⣷⣶⣶⣤⣀⣀⣀⢀⣠⣴⣿⣿⣿⣿⡿⠟⠉⠀⠀⠀⠀⢀⣶
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣿⣿⣿⣿⣿⣿⣶⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⣴⡿⢃
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣿⣿⣿⠟⠛⠛⠛⠿⢿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⢀⣼⠟⡁⢂
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⡟⠉⠀⠀⠀⢀⣴⣿⣿⣟⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⢀⡾⢁⠒⠨⠄
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⡿⠁⠀⠀⠀⢠⣼⣿⣿⣿⣽⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠁⠎⡐⠢⠐
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⠏⠀⠀⠀⠀⣠⣿⣿⢯⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡧⠛⠛⣶⠁⡃
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣾⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⠃⠀⠀⠀⠀⢰⣿⣿⣯⣾⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠱⡈⠔
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⣀⣴⣿⣿⣯⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠿⣿⡿⠋⠀⠀⠀⠀⠀⢾⣿⣿⣷⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢶⣡⠘⠄
// ⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣷⣈
// ⠀⠀⠀⠀⢀⣀⣤⣿⣿⣿⣿⣿⣿⣿⣿⣧⣴⣿⣿⣿⡿⠙⠿⠟⠁⠀⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢻
// ⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⡿⠉⠙⣿⣿⣿⣿⣿⣿⣿⣧⣀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈
// ⢀⣴⣾⣿⣿⣿⣿⣿⣿⡿⠁⠠⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⢀⣠⣴⣶⡿⢿⠿⡿⢿⡾⣶⣦⣄⡀⠀⠀⠀⠀⠀⢰⣶⣼⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣾⣿⣿⣿⣿⠟⠁⠀⠀⠀⠄⡁⢀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⡄⠀⢸⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⢿⣦⣄⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⡿⠃⠀⠄⡁⣬⣶⣾⣶⣦⡀⠁⡈⠀⠛⢿⢿⣿⣾⣿⣿⢿⣿⣿⣿⣷⣄⠈⠙⠻⠿⠛⠉⠀⠀⠀⢸⣿⡀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣶⡀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⠁⠠⠁⣤⣿⣿⣿⣿⣿⣿⣇⠀⢀⠂⠈⣾⡷⣌⣙⠻⢿⣿⣯⢿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠘⣿⣷⣄⣀⣠⣿⣷⣄⠀⠀⠀⢠⣾⣷⡀⢹⣷⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⣿⣿⠀⠐⠈⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⡀⠂⣽⣿⡹⢮⡷⣮⣔⠻⢿⣮⣟⣻⢿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠙⠛⠛⠛⠁⠘⠻⠿⣷⣾⡿⠿⠋⠀⠀⢿⡆⠀⠀⠙⠻⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⣿⣿⠀⠠⠑⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠄⠠⢽⣾⡹⢧⡻⣵⢫⣟⣦⣍⡚⡽⢯⣿⣟⣿⣿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⣿⣿⠀⡐⠀⡀⠿⢿⣿⣿⡿⠟⠁⡀⠁⡀⠂⣿⣷⢫⣏⡷⣝⣻⡼⣞⡽⣻⠶⣍⡻⢿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⣿⣿⡀⢄⡐⠀⡀⢀⢀⡀⢀⠠⠐⣀⡐⣠⢠⡝⣾⡹⢮⡽⣛⡶⣝⣮⠷⣏⡿⣭⣻⢭⣻⢿⣿⣯⢿⣿⣿⣿⣿⣿⣷⣦⣠⣤⣤⣤⣤⣄⠀⠀⠀⠐⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⣿⣿⡽⢮⣽⡃⠀⢢⣿⣿⣶⠀⢹⣟⢿⡱⣏⣾⢳⣿⣿⣼⣳⡝⡾⣜⡻⣝⢯⡷⡽⣎⢷⣻⣿⣯⢿⣿⡽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⠉⠙⣾⣧⠀⠹⠿⠻⠉⢠⣻⠎⠣⠙⠡⣞⡽⣎⣿⣿⣿⣿⣷⣭⢻⡼⣫⣝⣻⢼⡳⣿⣿⣯⢿⣿⡽⣿⣿⣞⣿⣟⣿⣿⣿⣿⣿⣻⢿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣧⠀⢈⠻⢿⣶⣤⣢⠵⠯⠁⢈⠀⠐⢠⢻⡜⣧⣻⡿⣼⣿⣛⣿⣿⣷⣽⣎⢷⣫⢗⣿⣿⣿⢯⣿⣳⢿⣿⡞⣿⣎⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢹⣿⣿⣿⣧⣀⠠⠀⠉⠁⠁⠌⠣⣄⣷⣿⣿⣿⣿⣽⣖⣯⣿⣳⣿⢧⣿⡗⣿⣟⢿⣿⣷⣏⣾⣿⣿⣿⣿⣭⣿⣿⢞⣿⣎⣿⣿⣟⣽⣧⢆⣉⠛⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣷⣯⣿⣳⣿⡽⣿⣯⢞⡶⣹⢻⢿⡿⣿⣿⣿⣿⣿⣿⣯⣿⣎⣿⣿⡟⣾⣯⢻⣜⣳⣤⡹⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⡵⣿⡿⣜⡳⢯⣞⡼⣣⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⡿⣎⠿⣭⢻⣳⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀
// ⠈⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣷⣽⡳⣞⡽⣣⠿⡼⣭⣛⠿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣭⣛⢾⣹⣎⢿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣶⣿⣿
// ⠀⠀⠀⠈⠉⠙⠿⣿⣯⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣯⣿⣿⣿⣿⣿⣿⣷⣯⣗⣻⢵⡳⣭⢟⣮⢳⣏⢿⡻⣿⣿⣿⣿⣶⣭⣳⢳⢮⣛⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⢩⠳⣦⣄⠀⠀⠀⣿⣿⡹⢛⠟⡻
// ⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣷⣾⣽⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣽⣻⢿⣿⣿⣿⣿⣷⣿⣜⣯⣞⣳⢮⣳⡝⣧⢻⡟⣿⢿⣷⣯⣿⣮⣝⣿⣿⣿⡇⢎⠤⣀⡀⠀⠀⢤⠓⡔⡛⢿⣶⡾⢟⠳⢌⠣⢎⡱
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⣿⣿⣿⣾⣷⣿⣞⣧⡟⡽⣎⢷⣛⢿⣿⣿⣿⣿⣿⡏⡜⢢⠱⡘⠦⣙⢢⡙⠴⣉⠖⡤⡙⣌⠳⣈⠳⢌⡒
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⠿⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠿⣿⣿⣿⣿⣽⢮⡽⢾⣿⣿⣿⣿⡿⠱⣌⢃⠧⣙⢢⡑⠦⣉⢖⡡⢚⡰⠱⣌⠲⡡⢍⠦⡑
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣿⣿⣮⣽⣻⣿⣿⡟⣍⠲⡱⢌⢎⠲⡡⢆⡱⠣⢜⢢⡑⢣⠜⣑⢢⢣⡑⢎⡒⢍
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⡗⡬⡑⢦⡉⢎⡱⡑⢎⠴⣉⠎⡆⡍⢦⡙⢤⢃⠦⣉⠦⣉⠦
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢿⣿⣿⣿⣶⢉⠦⡘⠦⡱⡘⣌⠲⣡⠚⡔⡩⢆⡜⢢⢍⠲⣡⠚⢤⢃
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢉⣿⣿⣿⣾⡒⣍⠲⣡⠓⣌⠱⢢⡙⠴⣑⠪⢔⡃⢎⡱⢢⢙⢢⢃

class Solution {
public:

    int findBreakPoint(vector<int>& nums) {
        int start = 0, mid, end = nums.size()-1;
        while(start < end) {
            mid = start + (end - start) / 2;
            if(nums[mid] > nums[mid+1]) {
                return mid+1;
            } else if(nums[mid] < nums[start]) {
                end = mid;
            } else {
                start = mid+1;
            }
        }
        return 0;
    }

    int search(vector<int>& nums, int target) {
        if(nums.size() == 1) {
            if(nums[0] == target) return 0;
            else return -1;
        }
        int br_idx = findBreakPoint(nums);
        if (br_idx == 0) {
            // Array is not rotated, perform regular binary search
            int start = 0, mid, end = nums.size()-1;
            while(start <= end) {
                mid = (start+end)/2;
                if(nums[mid] == target) return mid;
                else if(nums[mid] < target) start = mid+1;
                else end = mid-1;
            }
            return -1;
        }
        // Array is rotated, perform modified binary search
        int start = 0, mid, end = nums.size()-1;
        while(start <= end) {
            mid = (start+end)/2;
            if(nums[(mid+br_idx)%nums.size()] == target) return (mid+br_idx)%nums.size();
            else if(nums[(mid+br_idx)%nums.size()] < target) start = mid+1;
            else end = mid-1;
        }
        return -1;
    }
};

int main() {
    Solution s;
    vector<int> nums = {1, 3};
    cout << s.search(nums, 0) << endl;
    return 0;
}