#include <bits/stdc++.h>
using namespace std;

// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣄⠀⠀⠀⠀⢀⣀⣈⡲⣄⠀⠀⠀⠀⠀⠳⡀⠀⠀⠀⠀⠀⠀⢷⠀⡇⠃⠀⠀⠤⡄⢰⠀⢀⢔⡾⠃⠀⠀⠀
// ⠀⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣶⠶⠭⠭⠶⠤⢍⡙⡆⠀⠀⠀⠀⠀⠹⡌⢢⡡⡀⠀⢤⢸⡠⠇⠇⠀⠀⢰⠐⡇⡴⡳⠁⢠⠀⠀⠀⠀
// ⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠴⠖⠒⠒⠀⠀⠀⠀⠀⠉⠒⠀⠀⠀⠀⠈⠢⡘⢆⣱⢧⠀⢸⢺⣱⠐⣠⡀⡀⡞⣸⣻⠀⠀⠈⠉⠁⣀⠤⠀
// ⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠚⠁⠀⠀⠀⠀⣒⣤⡀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠁⢦⠉⠛⠀⢺⣿⠃⢸⣿⣽⡝⠓⣡⡇⠀⠀⠀⠀⠘⠢⣄⠀
// ⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠉⠉⠉⠀⢀⡭⠷⣯⠭⠄⠀⢀⡀⠀⠀⠀⢠⠀⠀⠑⠦⣀⣸⡝⣆⠚⠋⠁⣀⠴⣱⢤⣲⣿⠿⠅⠀⠀⠀⣑
// ⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠋⡙⣿⣶⡤⠖⠋⠉⠀⠀⠀⠀⠀⠳⡄⠀⠀⠀⢉⠹⡜⡆⠠⡾⠥⠖⠓⠙⣻⠀⠀⠀⢀⢄⡜⠤
// ⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠊⣡⠞⣁⣀⣄⣠⡤⢤⠤⣆⠤⠄⣀⠘⢦⡀⠰⡀⢧⠘⠹⡄⢧⠀⠀⠀⣰⠙⠀⠀⣠⢛⠥⠒⠒
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡠⠇⠀⠘⣇⣿⣿⣿⡀⠀⠤⢄⡤⣘⠣⡀⠣⡄⢧⠸⡄⠃⢻⠸⠀⠀⠀⠃⠀⠀⠀⠣⠤⠤⢤⣄
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣆⢸⣦⣤⣾⣿⣿⣿⣷⣆⠀⠀⠑⠦⣝⡮⣦⠈⢸⡀⠳⠳⣸⠃⠀⢀⡠⠞⠀⢀⣀⠀⠀⣀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⡿⠘⣿⣿⣿⣿⣿⣿⣿⣟⣓⣦⡄⠀⠁⠫⢟⣇⡘⠀⢠⢀⡽⣸⣡⡾⣫⡄⣠⡾⡫⠔⢋⡁⠐⠲
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣵⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⠛⢋⣁⣀⣀⡁⠀⠁⡾⠎⣠⣿⣿⣿⠿⣚⢍⣉⣀⣤⡶⢒⠛⠋
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠛⠉⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⣶⣻⠷⠏⣀⣀⣀⣉⡉⠚⣻⣇⠄⠚⠵
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⡄⠀⠀⠀⠘⡾⣿⣿⣿⣿⣟⡻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣶⣀⣤
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠼⡆⠀⠀⠀⠈⠿⣿⣯⣙⣿⣻⣿⣲⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣏⢿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⢙⣲⣯⠄⢠⡏⠀⠀⠀⠀⠀⠈⠛⠛⠿⠿⠿⠿⠿⠿⠟⠛⠛⢿⣿⢟⡟⠋⡭⡴⣖⠸⣿⠉⠀⢾⣸⣿⣿⣜⣻⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⠞⠓⣫⠝⢦⡬⣍⢁⣱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠜⠊⠁⢀⡼⣡⠏⠈⣹⠏⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣸⠊⠙⠢⢤⣬⣵⣶⡇⠘⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⣤⡖⣲⣫⡤⠖⠋⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠷⢄⣀⣼⣿⣼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣞⡶⠚⠁⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠀⠀⠈⣏⠿⠽⣇⠻⣷⣤⢤⣀⣀⣀⣀⡠⣄⣤⠤⠤⢤⠤⠤⣤⣤⣾⣿⡿⠁⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⣀⡤⠔⠚⢉⡜⠁⠀⠈⠁⠉⠉⠉⠉⠉⠙⣏⡹⠽⣽⣭⣿⣟⣭⣽⣭⢯⠃⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⢀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣉⢹⡆⣿⣿⣿⣿⣿⣿⣷⡃⠀⢀⣀⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠒⣶⣤⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢠⣿⣷⢹⣿⣿⣿⣿⡝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⣶⣤⣄⠀⠀⠀⠀⠀⠀⢰⠃⣼⣿⣿⣷⡻⣿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣏⢋⠀⠀⠀⠀⠀⠀⡜⢠⣾⣿⢿⣿⣷⡘⠿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣮⢣⠀⠀⠀⠀⠀⠀⢀⣿⣿⢸⣿⣿⣿⣶⣄⡙⡻⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣧⠳⣄⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⡞⣿⣿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣆⠈⠉⠉⠉⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⣀⣾⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⢯⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0) return 0;
        unordered_set<int> mp;
        for(auto it = nums.begin(); it != nums.end(); it++) {
            mp.insert(*it);
        }
        int max = 1, count, k;
        for(int i = 0; i < nums.size(); i++) {
            k = nums[i];
            count = 0;
            if(mp.find(k-1) != mp.end()) continue;
            while(mp.find(k) != mp.end()) {
                count++;
                k++;
            }
            cout << max << '\n';
            if(count > max) max = count;
        }
        return max;
    }
};

